<?xml version="1.0"?>
<vulntypes>
  <vulntype>
    <name>Improper Escaping</name>
    <label/>
    <cwe/>
    <html>&lt;p&gt;When using components that have set the escape attribute to false, or when including formulas outside of a Visualforce component, output is unfiltered and must be validated for security. This is especially important when using formula expressions.&lt;/p&gt;&#xD;
&lt;p&gt;Formula expressions can be function calls or include information about platform objects, a user's environment, system environment, and the request environment. It is important to be aware that the output that is generated by expressions is not escaped during rendering. Since expressions are rendered on the server, it is not possible to escape rendered data on the client using JavaScript or other client-side technology. This can lead to potentially dangerous situations if the formula expression references non-system data (that is potentially hostile or editable data) and the expression itself is not wrapped in a function to escape the output during rendering.&lt;/p&gt;&#xD;
&lt;p&gt;More information here: &lt;a href="http://www.salesforce.com/us/developer/docs/pages/Content/pages_security_tips_scontrols.htm"&gt;http://www.salesforce.com/us/developer/docs/pages/Content/pages_security_tips_scontrols.htm&lt;/a&gt;&lt;/p&gt;</html>
    <priority>2</priority>
    <enabledSections>[0, 1, 2, 3, 4, 5, 6]</enabledSections>
  </vulntype>
  <vulntype>
    <name>Sharing Violation</name>
    <label/>
    <cwe/>
    <html>&lt;p&gt;The Force.com platform makes extensive use of data sharing rules. Each object can have unique permissions for which users and profiles can read, create, edit, and delete. These restrictions are enforced when using all standard controllers. When using a custom Apex class, the built-in profile permissions and field-level security restrictions are not respected during execution. The default behavior is that an apex class has the ability to read and update all data with the organization. Because these rules are not enforced, developers who use Apex must take care that they do not inadvertently expose sensitive data that would normally be hidden from users by profile-based permissions, field-level security, or organization-wide defaults. This is particularly true for Visualforce pages. Classes should explicitly declare with sharing when possible.&lt;/p&gt;&#xD;
&lt;a href="http://wiki.developerforce.com/index.php/Testing_CRUD_and_FLS_Enforcement"&gt;More info here: http://wiki.developerforce.com/index.php/Testing_CRUD_and_FLS_Enforcement&lt;/a&gt;</html>
    <priority>3</priority>
    <enabledSections>[0, 1, 2, 3, 4, 5, 6]</enabledSections>
  </vulntype>
  <vulntype>
    <name>CRUD/FLS Enforcement</name>
    <label/>
    <cwe/>
    <html>&lt;p&gt;Object (CRUD) and Field Level Security (FLS) are configured on profiles and can be used to restrict access on object types and individual fields. Force.com developers should design their applications to enforce the organization's CRUD and FLS settings, and to gracefully degrade if a user's access has been restricted. For more information, please review the documentation for &lt;a href="http://wiki.developerforce.com/index.php/Testing_CRUD_and_FLS_Enforcement"&gt;CRUD and FLS&lt;/a&gt; on the DeveloperForce Wiki.&lt;/p&gt;</html>
    <priority>3</priority>
    <enabledSections>[0, 1, 2, 3, 4, 5, 6]</enabledSections>
  </vulntype>
  <vulntype>
    <name>JS in Salesforce DOM</name>
    <label/>
    <cwe/>
    <html>&lt;p&gt;JavaScript of any type is not allowed to run within the Salesforce.com application context. This includes JavaScript blocks within HomePageComponents, WebLinks, and all other components that are run under the Salesforce.com DOM.&lt;/p&gt;</html>
    <priority>1</priority>
    <enabledSections>[0, 1, 2, 3, 4, 5, 6]</enabledSections>
  </vulntype>
  <vulntype>
    <name>S-Controls</name>
    <label/>
    <cwe/>
    <html>&lt;p&gt;S-Controls have been deprecated and are not allowed in applications under any circumstances.&lt;/p&gt;</html>
    <priority>1</priority>
    <enabledSections>[0, 1, 2, 3, 4, 5, 6]</enabledSections>
  </vulntype>
  <vulntype>
    <name>Possible XSS / escape='false'</name>
    <label/>
    <cwe/>
    <html>'Escape' is a Boolean value that specifies whether sensitive HTML and XML characters should be escaped in the HTML output generated by certain Visualforce components. If you do not specify escape="false", the character escape sequence displays as written. Setting this value to "false" may be a security risk because it allows arbitrary content, including JavaScript, that could be used in a malicious manner.&#xD;
&#xD;
In most cases, the 'escape' parameter should be set to "true" (or left unspecified to default to "true"). There may be specific instances where it is necessary to do otherwise - such cases should be documented in a false positives document.</html>
    <priority>3</priority>
    <enabledSections>[0, 1, 2, 3, 4, 5, 6]</enabledSections>
  </vulntype>
  <vulntype>
    <name>Sensitive Information in Debug</name>
    <label/>
    <cwe>215</cwe>
    <html>&lt;p&gt;Revealing information in debug statements can help reveal potential attack vectors to an attacker. Debug statements can be invaluable for diagnosing issues in the functionality of an application, but they should not publicly disclose sensitive or overly detailed information (this includes passwords, keys, and stack traces as error messages, among other things).&lt;/p&gt;&lt;p&gt;See also: &lt;a href="https://www.owasp.org/index.php/Information_Leakage" target="_blank"&gt;https://www.owasp.org/index.php/Information_Leakage&lt;/a&gt;.&lt;/p&gt;</html>
    <priority>2</priority>
    <enabledSections>[0, 1, 2, 3, 5, 4, 6]</enabledSections>
  </vulntype>
  <vulntype>
    <name>Lightning: Inline Javascript</name>
    <label/>
    <cwe/>
    <html>&lt;p&gt;The only allowed inline Javascript consists of direct references to controller actions. When possible, use Lightning events such as &#x2018;Press&#x2019; instead of standard DOM events.&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;See &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/js_client_side_controller.htm" target="_blank"&gt;https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/js_client_side_controller.htm&lt;/a&gt;&lt;/p&gt;</html>
    <priority>2</priority>
    <enabledSections>[0, 1, 2, 3, 4, 5, 6]</enabledSections>
  </vulntype>
  <vulntype>
    <name>Lightning: Controller DOM Modification</name>
    <label/>
    <cwe/>
    <html>&lt;p&gt;In Lightning applications, javascript controllers update the in-memory data structures which are then passed to a rendering service for updating the DOM.  The rendering service is the bridge from the framework to update the DOM. If you modify the DOM from a client-side controller, the changes may be overwritten when the components are rendered, depending on how the component renderers behave.&lt;/p&gt;&#xD;
&lt;p&gt;Because of this, you should never modify the DOM outside a renderer. However, you can read from the DOM outside a renderer. You should also use expressions, whenever possible, instead of trying to set a DOM element directly.&lt;/p&gt;&#xD;
&lt;p&gt;This prohibition includes assigning styles to elements directly within a controller. Element style changes should be done in the renderer or, if done in a controller, use the toggleClass() utility method.&lt;/p&gt;&#xD;
&lt;p&gt;See: &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/js_dom_access.htm" target="_blank"&gt;https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/js_dom_access.htm&lt;/a&gt; and &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/js_renderers.htm" target="_blank"&gt;https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/js_renderers.htm&lt;/a&gt;&lt;/p&gt;</html>
    <priority>2</priority>
    <enabledSections>[0, 1, 2, 3, 4, 5, 6]</enabledSections>
  </vulntype>
  <vulntype>
    <name>Lightning: Improper CSS Load</name>
    <label/>
    <cwe/>
    <html>&lt;p&gt;To reference an external CSS resource that you&#x2019;ve uploaded as a static resource, use a &amp;#60;ltng:require&amp;#62; tag in your .cmp or.app markup. Do not use &amp;#60;link&amp;#62; tags to load CSS resources.&lt;/p&gt;&#xD;
&lt;p&gt;See: &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/apps_css_external_platform.htm" target="_blank"&gt;https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/apps_css_external_platform.htm&lt;/a&gt;&lt;/p&gt;</html>
    <priority>2</priority>
    <enabledSections>[0, 1, 2, 3, 4, 5, 6]</enabledSections>
  </vulntype>
  <vulntype>
    <name>Lightning: Improper Script Load</name>
    <label/>
    <cwe/>
    <html>&lt;p&gt;To reference a JavaScript library that you've uploaded as a static resource, use a &amp;#60;ltng:require&amp;#62; tag in your .cmp or .appmarkup:&#xD;
&amp;#60;ltng:require scripts="/resource/resourceName" afterScriptsLoaded="{!c.afterScriptsLoaded}" /&amp;#62;&lt;/p&gt;&#xD;
&lt;p&gt;See: &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/js_libs_platform.htm" target="_blank"&gt;https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/js_libs_platform.htm&lt;/a&gt;&lt;/p&gt;</html>
    <priority>2</priority>
    <enabledSections>[0, 1, 2, 3, 4, 5, 6]</enabledSections>
  </vulntype>
  <vulntype>
    <name>Lightning: Async Code</name>
    <label/>
    <cwe/>
    <html>&lt;p&gt;setInterval, setTimeout and any other asynchronous function must be called within an anonymous function invoked from $A.getCallback().&lt;/p&gt;</html>
    <priority>2</priority>
    <enabledSections>[0, 1, 2, 3, 4, 5, 6]</enabledSections>
  </vulntype>
  <vulntype>
    <name>Lightning: Illegal DOM Access</name>
    <label/>
    <cwe/>
    <html>&lt;p&gt;Within a component renderer, only modify the DOM elements belonging to that component. Do not modify DOM elements corresponding to parent or child components.&lt;/p&gt;&#xD;
&lt;p&gt;See: &lt;a href="https://developer.salesforce.com/page/Lightning_Security" target="_blank"&gt;https://developer.salesforce.com/page/Lightning_Security&lt;/a&gt;&lt;/p&gt;</html>
    <priority>2</priority>
    <enabledSections>[0, 1, 2, 3, 4, 5, 6]</enabledSections>
  </vulntype>
  <vulntype>
    <name>Lightning: Illegal Javascript</name>
    <label/>
    <cwe/>
    <html>&lt;p&gt;Do not use unsafe Javascript constructs such as eval() or the equivalent Function() or setInterval/setTimeout (with string function bodies). Do not overwrite or extend built in functions.&lt;/p&gt;&#xD;
&lt;p&gt;See: &lt;a href="https://developer.salesforce.com/page/Lightning_Security" target="_blank"&gt;https://developer.salesforce.com/page/Lightning_Security&lt;/a&gt;&lt;/p&gt;</html>
    <priority>2</priority>
    <enabledSections>[0, 1, 2, 3, 4, 5, 6]</enabledSections>
  </vulntype>
  <vulntype>
    <name>Lightning: Insufficient Escaping</name>
    <label/>
    <cwe/>
    <html>&lt;p&gt;The security boundary of an individual component is the component bundle, with each component responsible for sanitizing the input provided to it by parent components, apps, or by URL parameters. Therefore public or global component attributes are assumed to contain attacker controlled inputs unless sanitized by the component in an onInit: handler. This component reads data from a public or global attribute and then renders it to the DOM without sufficient escaping. This can lead to cross site scripting attacks or URL redirection attacks.&lt;/p&gt;&#xD;
&lt;p&gt;See: &lt;a href="https://developer.salesforce.com/page/Lightning_Security" target="_blank"&gt;https://developer.salesforce.com/page/Lightning_Security&lt;/a&gt;&lt;/p&gt;</html>
    <priority>2</priority>
    <enabledSections>[0, 1, 2, 3, 4, 5, 6]</enabledSections>
  </vulntype>
  
  <vulntype>
    <name>Sample Code in Production</name>
    <label/>
    <cwe/>
    <html>&lt;p&gt;There's a lot of great sample code available to developers all over the internet. While useful in learning best practices or new technologies, sample or documentation code should not be directly included in production packages. This can lead to propagation of vulnerabilities or software weaknesses, whether intentional or not on the part of the sample/documentation code author, throughout many packages.&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;Sample code should always be used as an educational tool in preparation for developing your own application. When you are building out your production code you should always write the code yourself and avoid copying/pasting code from other sources that you do not directly control.&lt;/p&gt;&#xD;
&#xD;
&lt;p&gt;For Salesforce developers, a common red flag for copying sample code is the inclusion of an Account.object file with a &amp;lt;url&amp;gt; parameter of 'http://www.genwatt.com/genwatt/billing.htm?actname={!Account_Name}. This code comes from Salesforce-provided sample and documentation code. Fortunately, in this case this is sample Salesforce code and that URL is not active.&lt;/p&gt;</html>
    <priority>1</priority>
    <enabledSections>[0, 1, 2, 3, 5, 4, 6]</enabledSections>
  </vulntype>
</vulntypes>
